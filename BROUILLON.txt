           
            
#              def self.destroy_all
#                  if RAILS_ENV == 'development' 
#                    puts "ici0"
#                  end

#                  self.all.each do |o| 
#                    if RAILS_ENV == 'development' 
#                    puts "id : #{o.id}"
#                    end
#                    o.destroy               
#                  end #call delete method for each instance of the class            

 #             end
              




#
#         def self.uselessdelete(id) #overrides delete to delete every pieces of information about this record wherever it may be stored
#            if RAILS_ENV == 'development' 
#              puts "delete de classe = #{self.name}"
#            end
#            return super if self == self.mother_class #if the class of the record is the mother class then call with the id of the object
#                                                              #if the class of the record is not the mother class then 
#            if RAILS_ENV == 'development' 
#              puts "2->delete de classe = #{self.name}"
#            end
#            
#            if self.respond_to?('has_a_part_of?') # eventually delete pieces of information stored in the table associated to the class of the object (if there is such a table)
#              if self.has_a_part_of?  
#                if RAILS_ENV == 'development' 
#                  puts("has a part of")
#                end
#                self::PartOf.delete(id)
#              else
#                if RAILS_ENV == 'development' 
#                  puts "no part of" 
#                end
#              end 
#            end
#
#            if RAILS_ENV == 'development' 
#              puts "3->delete de classe = #{self.name}"
#            end
#
#           self.superclass.delete(id)                     # call the delete method associated to the super class of the current class with the id the object
#          end  #A AMELIORER


def qsave

  if self.class == self.class.mother_class #if the class of the instance is the mother class then call A COMPLETER with the id of the instance
    if RAILS_ENV == 'development' 
      puts "zemotherclass"
    end
    ret=super

    #the code below is there to ensure that inheritance column is correctly set for the mother class since in this case the inheritance columns is protected against mass assignement      
    sql = "UPDATE #{self.class.mother_class.table_name} SET '#{self.class.inheritance_column}'= '#{self.class.to_s}' WHERE id = #{self.id}"
    if RAILS_ENV == 'development' 
      puts "SQL : #{sql}"
    end
    self.connection.execute(sql)

    return ret 
  end
  attributes_for_super = self.attributes.select{|key,value| self.class.superclass.column_names.include?(key) } #get the attributes of the class of the instance that also belong to its superclass 
  attributes_for_part_of = self.attributes.select{|key,value| !self.class.superclass.column_names.include?(key) } #get the attributes of the class of the instance that do not belong to its superclass
                                                                                                                  # these pieces of information should be stored in the table associated to the class of the instance
  herited = self.class.superclass.new(attributes_for_super)   #create a new instance of the superclass of the considered instance (self) 
  if(!new_record?)
      herited.swap_new_record
      herited.id = self.id
  end

  if RAILS_ENV == 'development' 
    puts("herited save #{herited.class}")
  end
  herited_saved = herited.saveBis # save the new instance (by calling its save method)

  if(herited_saved==false) 
    alert('please contact altrabio use the following mail : altrabio...altrabio.com') # que faire si herited_saved vaut false ? A VOIR
  end

  part_of_saved=true
  if( ! attributes_for_part_of.empty? ) #if there are some piecesof information to save in the table associated to the class of the cosidered instance
    part_of = self.class::PartOf.new(attributes_for_part_of) #A COMPLETER création nouvel objet partof renseigné
    part_of.id = herited.id

    if(!new_record?)
      part_of.swap_new_record
    end

    part_of_saved = part_of.save
    if(part_of_saved==false) 
      alert('please contact altrabio use the following mail : altrabio...altrabio.com') # que faire si herited_saved vaut false ? A VOIR
    end
   end


  self.id = herited.id
  if RAILS_ENV == 'development' 
    puts "x : "
  end
  sql = "UPDATE #{self.class.mother_class.table_name} SET type = '#{self.class.to_s}' WHERE id = #{self.id}"
  if RAILS_ENV == 'development' 
    puts "SQL : #{sql}"
  end
  self.connection.execute(sql)
  return herited_saved && part_of_saved 
end


 def qsaveBis #Arnaque pour éviter 

    return save if self.class == self.class.mother_class #if the class of the instance is the mother class then call A COMPLETER with the id of the instance

    attributes_for_super = self.attributes.select{|key,value| self.class.superclass.column_names.include?(key) } #get the attributes of the class of the instance that also belong to its superclass 
    attributes_for_part_of = self.attributes.select{|key,value| !self.class.superclass.column_names.include?(key) } #get the attributes of the class of the instance that do not belong to its superclass
                                                                                                                    # these pieces of information should be stored in the table associated to the class of the instance
    herited = self.class.superclass.new(attributes_for_super)   #create a new instance of the superclass of the considered instance (self) 

    if(!new_record?)
        herited.swap_new_record
        herited.id = self.id
    end

    herited_saved = herited.saveBis # save the new instance (by calling its save method)

    if(herited_saved==false) 
      alert('please contact altrabio use the following mail : altrabio...altrabio.com') # que faire si herited_saved vaut false ? A VOIR
    end

    part_of_saved=true
    if( ! attributes_for_part_of.empty? ) #if there are some piecesof information to save in the table associated to the class of the cosidered instance
      part_of = self.class::PartOf.new(attributes_for_part_of) #A COMPLETER création nouvel objet partof renseigné
      part_of.id = herited.id

      if(!new_record?)
        part_of.swap_new_record
      end

      part_of_saved = part_of.save
      if(part_of_saved==false) 
        alert('please contact altrabio use the following mail : altrabio...altrabio.com') # que faire si herited_saved vaut false ? A VOIR
      end
     end

    self.id = herited.id

    return herited_saved && part_of_saved 
  end
